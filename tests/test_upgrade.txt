Basic setup::

    >>> from __main__ import here, reset_env, run_pip, pyversion, lib_py, get_env, diff_states, write_file
    >>> from os.path import join

Automatic uninstall-before-upgrade::

    >>> reset_env()
    >>> result = run_pip('install', 'simplejson==1.7.4', expect_error=True)
    >>> assert join(lib_py + 'site-packages', 'simplejson') in result.files_created, sorted(result.files_created.keys())
    >>> result2 = run_pip('install', '--upgrade', 'simplejson==2.0.9', expect_error=True)
    >>> result3 = run_pip('uninstall', 'simplejson', '-y', expect_error=True)
    >>> diff_states(result.files_before, result3.files_after, ignore=['build']).values()
    [{}, {}, {}]

# FIXME Testing rollback of auto-uninstall requires a
# publicly-available package that has a broken setup.py such that
# "python setup.py egg-info" works, but "python setup.py install"
# fails. Wouldn't be too hard to create such a package, but at the
# moment I'm not sure where to host it, and don't feel like adding yet
# another external point of failure to these tests. So test it
# manually! Real-world need for this feature should be minimal, as the
# common failure modes (package can't be downloaded, setup.py really
# broken) will cause failure before the existing distribution is ever
# uninstalled.
